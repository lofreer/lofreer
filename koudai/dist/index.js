/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _components = __webpack_require__(2);\n\nvar _routes = __webpack_require__(5);\n\nvar _routes2 = _interopRequireDefault(_routes);\n\n__webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_components.Simple.render(_components.Simple.createElement(_components.Router, { history: 'hash', routes: (0, _routes2.default)() }), document.querySelector('#root'));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiaGlzdG9yeSIsInJvdXRlcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUVBOzs7O0FBRUEsbUJBQU9BLE1BQVAsQ0FBYyxtQkFBT0MsYUFBUCxxQkFBNkIsRUFBQ0MsU0FBUyxNQUFWLEVBQWtCQyxRQUFRLHVCQUExQixFQUE3QixDQUFkLEVBQWlGQyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWpGIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1wbGUsIFJvdXRlciB9IGZyb20gJ2NvbXBvbmVudHMnO1xuaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XG5cbmltcG9ydCAnLi9qcy9jb21wb25lbnRzL3N0eWxlLmxlc3MnXG5cblNpbXBsZS5yZW5kZXIoU2ltcGxlLmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7aGlzdG9yeTogJ2hhc2gnLCByb3V0ZXM6IHJvdXRlcygpfSksIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb290JykpO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Router = exports.Simple = undefined;\n\nvar _simple = __webpack_require__(3);\n\nvar _simple2 = _interopRequireDefault(_simple);\n\nvar _simpleRouter = __webpack_require__(4);\n\nvar _simpleRouter2 = _interopRequireDefault(_simpleRouter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Simple = _simple2.default;\nexports.Router = _simpleRouter2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9pbmRleC5qcz9kMjAzIl0sIm5hbWVzIjpbIlNpbXBsZSIsIlJvdXRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBR0E7Ozs7OztRQUZTQSxNO1FBR0FDLE0iLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW1wbGUgZnJvbSAnLi9zaW1wbGUnO1xuZXhwb3J0IHsgU2ltcGxlIH07XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9zaW1wbGUtcm91dGVyJztcbmV4cG9ydCB7IFJvdXRlciB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jb21wb25lbnRzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/******************  utils 工具类 start  *****************/\nvar utils = {\n    each: function each(obj, iterator, context) {\n        if (obj == null) return;\n        if (obj.length === +obj.length) {\n            for (var i = 0, l = obj.length; i < l; i++) {\n                if (iterator.call(context, obj[i], i, obj) === false) return false;\n            }\n        } else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    if (iterator.call(context, obj[key], key, obj) === false) return false;\n                }\n            }\n        }\n    },\n    extend: function extend(prop) {\n        Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    prop[key] = source[key];\n                }\n            }\n        });\n        return prop;\n    }\n};\n\n// 类型判断方法\n['String', 'Function', 'Array', 'Number', 'RegExp', 'Object', 'Date'].forEach(function (v) {\n    utils['is' + v] = function (obj) {\n        return {}.toString.call(obj) === \"[object \" + v + \"]\";\n    };\n});\n/******************  utils 工具类 end  *****************/\n\n/****************** 底层事件模块 start ******************/\nvar Events = {\n    addListener: function addListener(event, listener) {\n        var self = this,\n            events = event.split(' ');\n        if (!this.hasOwnProperty('listeners')) {\n            this.listeners || (this.listeners = {});\n        };\n        events.forEach(function (event) {\n            self.listeners[event] || (self.listeners[event] = []);\n            self.listeners[event].push(listener);\n        });\n        return this;\n    },\n    on: function on(event, listener) {\n        return this.addListener(event, listener);\n    },\n    once: function once(event, listener) {\n        function handler() {\n            this.removeListener(event, handler);\n            return listener.apply(this, arguments);\n        };\n        return this.addListener(event, handler);\n    },\n    removeListener: function removeListener(event, listener) {\n        var self = this,\n            events,\n            listeners,\n            list;\n        if (arguments.length === 0) {\n            this.listeners = {};\n            return this;\n        };\n        events = event.split(' ');\n        events.forEach(function (event) {\n            list = (listeners = self.listeners) != null ? listeners[event] : void 0;\n            if (!list) return;\n            if (!listener) return delete self.listeners[event];\n            list.forEach(function (event, i) {\n                if (!(event === listener)) return;\n                list.splice(i, 1);\n                self.listeners[event] = list;\n            });\n        });\n        return this;\n    },\n    off: function off(event, listener) {\n        return this.removeListener(event, listener);\n    },\n    listenerList: function listenerList(event) {\n        return this.listeners[event];\n    },\n    emit: function emit() {\n        var self = this,\n            args,\n            listeners,\n            event,\n            list;\n        args = arguments.length >= 1 ? [].slice.call(arguments, 0) : [];\n        event = args.shift();\n        list = (listeners = this.listeners) != null ? listeners[event] : void 0;\n        if (!list) return;\n        list.forEach(function (event) {\n            event.apply(self, args);\n        });\n        return true;\n    }\n};\n/****************** 底层事件模块 end ******************/\n// 自定义元素超级类\nfunction SimpleClass() {}\nSimpleClass.prototype = {\n    render: function render() {},\n    setState: function setState(newState) {\n        this._simpleInternalInstance.receiveComponent(null, newState);\n    }\n};\n// 构建简单的虚拟节点\nfunction SimpleElement(type, key, props) {\n    this.type = type;\n    this.key = key;\n    this.props = props;\n}\n// 工厂方法，调用相对应的处理模块\nfunction instantiateSimpleComponent(node) {\n    if (utils.isString(node) || utils.isNumber(node)) {\n        return new SimpleDOMTextComponent(node);\n    } else if (utils.isObject(node) && utils.isString(node.type)) {\n        return new SimpleDOMComponent(node);\n    } else if (utils.isObject(node) && utils.isFunction(node.type)) {\n        return new SimpleCompositeComponent(node);\n    }\n}\n\n// 文本节点模块\nfunction SimpleDOMTextComponent(text) {\n    this._currentElement = '' + text;\n    this._rootNodeID = null;\n}\nSimpleDOMTextComponent.prototype = {\n    mountComponent: function mountComponent(rootID) {\n        this._rootNodeID = rootID;\n        return this._currentElement;\n    },\n    receiveComponent: function receiveComponent(nextText) {\n        var nextStringText = '' + nextText;\n        if (nextStringText !== this._currentElement) {\n            this._parentNode.innerHTML = nextStringText;\n            this._currentElement = nextStringText;\n        }\n    }\n};\n\n// DOM元素模块\nfunction SimpleDOMComponent(element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n}\n\nvar updateDepth = 0;\nvar diffQueue = [];\nvar UPDATE_TYPES = {\n    MOVE_EXISTING: 1,\n    REMOVE_NODE: 2,\n    INSERT_NODE: 3\n};\nSimpleDOMComponent.prototype = {\n    mountComponent: function mountComponent(rootID) {\n        var self = this;\n        this._rootNodeID = rootID;\n        var props = this._currentElement.props;\n        var children = props.children || [];\n\n        var node = document.createElement(this._currentElement.type);\n        node.setAttribute('data-simpleid', this._rootNodeID);\n\n        utils.each(props, function (value, key) {\n            if (/^on[A-Za-z]/.test(key)) {\n                var eventType = key.toLowerCase().replace('on', '');\n                self.addListener(node, eventType, value);\n            }\n            if (value && key !== 'children' && key !== 'ref' && !/^on[A-Za-z]/.test(key)) {\n                node.setAttribute(key, value);\n            }\n        });\n        var childrenInstances = [];\n        var childrenRefs = {};\n        children.forEach(function (child, index) {\n            if (child) {\n                var childComponentInstance = instantiateSimpleComponent(child);\n                childComponentInstance._mountIndex = index;\n                if (!utils.isString(child) && !utils.isNumber(child)) {\n                    var ref = child.props['ref'];\n                    if (ref) childrenRefs[ref] = childComponentInstance;\n                } else {\n                    childComponentInstance._parentNode = node;\n                }\n                childrenInstances.push(childComponentInstance);\n                var curRootID = self._rootNodeID + '.' + index;\n                var childNode = childComponentInstance.mountComponent(curRootID);\n                utils.each(childComponentInstance._childrenRefs, function (value, key) {\n                    childrenRefs[key] = value;\n                });\n                childNode && childNode instanceof HTMLElement ? node.appendChild(childNode) : node.insertAdjacentHTML('beforeend', childNode);\n            }\n        });\n        this._renderedChildren = childrenInstances;\n        this._childrenRefs = childrenRefs;\n        return this._nativeNode = node;\n    },\n    receiveComponent: function receiveComponent(nextElement) {\n        var lastProps = this._currentElement.props;\n        var nextProps = nextElement.props;\n        this._updateDOMProperties(lastProps, nextProps);\n        this._updateDOMChildren(nextElement.props.children);\n        this._currentElement = nextElement;\n    },\n    addListener: function addListener(element, event, listener) {\n        var self = this;\n        if (!this.hasOwnProperty('listeners')) {\n            this.listeners || (this.listeners = {});\n        };\n        self.listeners[event] || (self.listeners[event] = []);\n        self.listeners[event].push(listener);\n        element.addEventListener(event, listener);\n    },\n    removeListener: function removeListener(element, event, listener) {\n        var self = this,\n            list;\n        list = self.listeners != null ? self.listeners[event] : void 0;\n        if (!list) return;\n        if (!listener) return delete self.listeners[event];\n        list.forEach(function (handler, i) {\n            if (!(handler === listener)) return;\n            element.removeEventListener(event, handler);\n            list.splice(i, 1);\n            self.listeners[event] = list;\n        });\n    },\n    _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps) {\n        var self = this,\n            propKey;\n        for (propKey in lastProps) {\n            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {\n                continue;\n            }\n            if (/^on[A-Za-z]/.test(propKey)) {\n                var eventType = propKey.toLowerCase().replace('on', '');\n                // 事件删除\n                self.removeListener(self._nativeNode, eventType, lastProps[propKey]);\n            }\n            this._nativeNode.removeAttribute(propKey);\n        }\n\n        for (propKey in nextProps) {\n            if (/^on[A-Za-z]/.test(propKey)) {\n                var eventType = propKey.toLowerCase().replace('on', '');\n                // 事件更新\n                if (lastProps[propKey]) {\n                    self.removeListener(self._nativeNode, eventType, lastProps[propKey]);\n                    self.addListener(self._nativeNode, eventType, nextProps[propKey]);\n                } else {\n                    self.addListener(self._nativeNode, eventType, nextProps[propKey]);\n                }\n                continue;\n            }\n            if (propKey === 'children' || propKey === 'ref') continue;\n            if (propKey === 'value' && this._nativeNode.nodeName === 'INPUT') {\n                this._nativeNode.value = nextProps[propKey];\n            } else {\n                this._nativeNode.setAttribute(propKey, nextProps[propKey]);\n            }\n        }\n    },\n    _updateDOMChildren: function _updateDOMChildren(nextChildrenElements) {\n        updateDepth++;\n        this._diff(diffQueue, nextChildrenElements);\n        updateDepth--;\n        if (updateDepth === 0) {\n            this._patch(diffQueue);\n            diffQueue = [];\n        }\n    },\n    _diff: function _diff(diffQueue, nextChildrenElements) {\n        var self = this,\n            key;\n        var prevChildren = flattenChildren(this._renderedChildren);\n        var nextChildren = generateComponentChildren(prevChildren, nextChildrenElements);\n        this._renderedChildren = [];\n        var childrenRefs = {};\n        utils.each(nextChildren, function (instance) {\n            self._renderedChildren.push(instance);\n            if (!utils.isString(instance._currentElement) && !utils.isNumber(instance._currentElement)) {\n                var ref = instance._currentElement.props['ref'];\n                if (ref) childrenRefs[ref] = instance;\n                instance._childrenRefs && utils.each(instance._childrenRefs, function (value, key) {\n                    childrenRefs[key] = value;\n                });\n            }\n        });\n        this._childrenRefs = childrenRefs;\n\n        var lastIndex = 0;\n        var nextIndex = 0;\n\n        for (key in nextChildren) {\n            if (!nextChildren.hasOwnProperty(key)) {\n                continue;\n            }\n            var prevChild = prevChildren && prevChildren[key];\n            var nextChild = nextChildren[key];\n            if (prevChild === nextChild) {\n                prevChild._mountIndex < lastIndex && diffQueue.push({\n                    parentID: this._rootNodeID,\n                    parentNode: this._nativeNode,\n                    type: UPDATE_TYPES.MOVE_EXISTING,\n                    fromIndex: prevChild._mountIndex,\n                    toIndex: nextIndex\n                });\n                lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            } else {\n                if (prevChild) {\n                    diffQueue.push({\n                        parentID: this._rootNodeID,\n                        parentNode: this._nativeNode,\n                        type: UPDATE_TYPES.REMOVE_NODE,\n                        fromIndex: prevChild._mountIndex,\n                        toIndex: null\n                    });\n                    lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n                }\n\n                diffQueue.push({\n                    parentID: this._rootNodeID,\n                    parentNode: this._nativeNode,\n                    type: UPDATE_TYPES.INSERT_NODE,\n                    fromIndex: null,\n                    toIndex: nextIndex,\n                    node: nextChild.mountComponent(this._rootNodeID + '.' + key)\n                });\n            }\n            nextChild._mountIndex = nextIndex;\n            nextIndex++;\n        }\n\n        for (key in prevChildren) {\n            if (prevChildren.hasOwnProperty(key) && !(nextChildren && nextChildren.hasOwnProperty(key))) {\n                diffQueue.push({\n                    parentID: this._rootNodeID,\n                    parentNode: this._nativeNode,\n                    type: UPDATE_TYPES.REMOVE_NODE,\n                    fromIndex: prevChildren[key]._mountIndex,\n                    toIndex: null\n                });\n            }\n        }\n    },\n    _patch: function _patch(updates) {\n        var initialChildren = {};\n        var deleteChildren = [];\n        utils.each(updates, function (update) {\n            if (update.type === UPDATE_TYPES.MOVE_EXISTING || update.type === UPDATE_TYPES.REMOVE_NODE) {\n                var updatedIndex = update.fromIndex;\n                var updatedChild = update.parentNode.childNodes[updatedIndex];\n                var parentID = update.parentID;\n\n                initialChildren[parentID] = initialChildren[parentID] || [];\n                initialChildren[parentID][updatedIndex] = updatedChild;\n\n                deleteChildren.push(updatedChild);\n            }\n        });\n\n        utils.each(deleteChildren, function (child) {\n            child.parentNode.removeChild(child);\n        });\n\n        utils.each(updates, function (update) {\n            switch (update.type) {\n                case UPDATE_TYPES.INSERT_NODE:\n                    insertChildAt(update.parentNode, update.node, update.toIndex);\n                    break;\n                case UPDATE_TYPES.MOVE_EXISTING:\n                    insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n                    break;\n                case UPDATE_TYPES.REMOVE_NODE:\n                    break;\n            }\n        });\n    }\n};\n\n// 更新判断\nfunction _shouldUpdateSimpleComponent(prevElement, nextElement) {\n    if (prevElement != null && nextElement != null) {\n        var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);\n        var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);\n        if (prevType === 'string' || prevType === 'number') {\n            return nextType === 'string' || nextType === 'number';\n        } else {\n            return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n        }\n    }\n    return false;\n}\n\n// 将数组更改为map映射\nfunction flattenChildren(componentChildren) {\n    var child,\n        name,\n        childrenMap = {};\n    utils.each(componentChildren, function (child, index) {\n        name = child && child._currentelement && child._currentelement.key ? child._currentelement.key : index.toString(36);\n        childrenMap[name] = child;\n    });\n    return childrenMap;\n}\n\n// 生成子元素节点的component集合\nfunction generateComponentChildren(prevChildren, nextChildrenElements) {\n    var nextChildren = {};\n    nextChildrenElements = nextChildrenElements || [];\n    nextChildrenElements.forEach(function (element, key) {\n        if (element) {\n            // key = element.key ? element.key : key;\n            var prevChild = prevChildren && prevChildren[key];\n            var prevElement = prevChild && prevChild._currentElement;\n            var nextElement = element;\n            if (_shouldUpdateSimpleComponent(prevElement, nextElement)) {\n                prevChild.receiveComponent(nextElement);\n                nextChildren[key] = prevChild;\n            } else {\n                var nextChildInstance = instantiateSimpleComponent(nextElement);\n                nextChildren[key] = nextChildInstance;\n            }\n        }\n    });\n    return nextChildren;\n}\n// 插入或者移动元素\nfunction insertChildAt(parentNode, childNode, index) {\n    var beforeChild = parentNode.childNodes[index];\n    if (childNode instanceof HTMLElement) {\n        beforeChild ? parentNode.insertBefore(childNode, beforeChild) : parentNode.insertBefore(childNode, null);\n    } else {\n        beforeChild ? parentNode.insertAdjacentHTML('afterBegin', childNode) : parentNode.insertAdjacentHTML('beforeend', childNode);\n    }\n}\n\n// 自定义类模块\nfunction SimpleCompositeComponent(element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n}\nSimpleCompositeComponent.prototype = {\n    mountComponent: function mountComponent(rootID) {\n        var self = this;\n        this._rootNodeID = rootID;\n        var publicProps = this._currentElement.props;\n        var SimpleClass = this._currentElement.type;\n        var inst = new SimpleClass(publicProps);\n        this._instance = inst;\n        inst._simpleInternalInstance = this;\n\n        if (inst.componentWillMount) {\n            inst.componentWillMount();\n        }\n        var renderedElement = this._instance.render();\n        if (utils.isString(renderedElement)) {\n            var node = Simple.createElement('span', null, [renderedElement]);\n            renderedElement = node;\n        }\n        var renderedComponentInstance = instantiateSimpleComponent(renderedElement);\n        this._renderedComponent = renderedComponentInstance;\n        this._nativeNode = renderedComponentInstance.mountComponent(this._rootNodeID);\n        utils.each(this._renderedComponent._childrenRefs, function (value, key) {\n            if (value instanceof SimpleCompositeComponent) {\n                self._instance.refs[key] = value._instance;\n            } else {\n                self._instance.refs[key] = value._nativeNode;\n            }\n        });\n        Simple.on('mountReady', function () {\n            inst.componentDidMount && inst.componentDidMount();\n        });\n        return this._nativeNode;\n    },\n    receiveComponent: function receiveComponent(nextElement, newState) {\n        var self = this;\n        this._currentElement = nextElement || this._currentElement;\n        var inst = this._instance;\n        var nextState = utils.extend(inst.state, newState);\n        var nextProps = this._currentElement.props;\n        inst.state = nextState;\n        inst.props = nextProps;\n        if (inst.shouldComponentUpdate && inst.shouldComponentUpdate(nextProps, nextState) === false) return;\n        if (inst.componentWillUpdate) inst.componentWillUpdate(nextProps, nextState);\n\n        var prevComponentInstance = this._renderedComponent;\n        var prevRenderedElement = prevComponentInstance._currentElement;\n        var nextRenderedElement = inst.render();\n        if (_shouldUpdateSimpleComponent(prevRenderedElement, nextRenderedElement)) {\n            prevComponentInstance.receiveComponent(nextRenderedElement);\n            self._instance.refs = {};\n            utils.each(this._renderedComponent._childrenRefs, function (value, key) {\n                if (value instanceof SimpleCompositeComponent) {\n                    self._instance.refs[key] = value._instance;\n                } else {\n                    self._instance.refs[key] = value._nativeNode;\n                }\n            });\n            inst.componentDidUpdate && inst.componentDidUpdate();\n        } else {\n            if (utils.isString(nextRenderedElement)) {\n                var span = Simple.createElement('span', null, [nextRenderedElement]);\n                nextRenderedElement = span;\n            }\n            this._renderedComponent = instantiateSimpleComponent(nextRenderedElement);\n            var node = this._renderedComponent.mountComponent(this._rootNodeID);\n            this._nativeNode.parentNode.replaceChild(node, this._nativeNode);\n            this._nativeNode = node;\n        }\n    }\n};\n\n// 构造函数\nvar Simple = {\n    nextSimpleRootIndex: 0,\n    createClass: function createClass(spec) {\n        var Constructor = function Constructor(props) {\n            this.props = this.getDefaultProps ? utils.extend({}, this.getDefaultProps(), props) : props;\n            this.state = this.getInitialState ? this.getInitialState() : null;\n            this.refs = {};\n        };\n        Constructor.prototype = new SimpleClass();\n        Constructor.prototype.constructor = Constructor;\n        utils.extend(Constructor.prototype, spec);\n        return Constructor;\n    },\n    createElement: function createElement(type, config, children) {\n        var props = {},\n            propName;\n        config = config || {};\n        var key = config.key || null;\n\n        for (propName in config) {\n            if (config.hasOwnProperty(propName) && propName !== 'key') {\n                props[propName] = config[propName];\n            }\n        }\n\n        var childrenLength = arguments.length - 2;\n        if (childrenLength === 1) {\n            props.children = utils.isArray(children) ? children : [children];\n        } else if (childrenLength > 1) {\n            var childArray = Array(childrenLength);\n            for (var i = 0; i < childrenLength; i++) {\n                childArray[i] = arguments[i + 2];\n            }\n            props.children = childArray;\n        }\n        return new SimpleElement(type, key, props);\n    },\n    render: function render(node, container) {\n        var componentInstance = instantiateSimpleComponent(node);\n        var element = componentInstance.mountComponent(Simple.nextSimpleRootIndex++);\n        element && element instanceof HTMLElement ? container.appendChild(element) : container.insertAdjacentHTML('beforeend', element);\n        this.emit('mountReady');\n        return element;\n    },\n    utils: utils\n};\n\nutils.extend(Simple, Events);\n\nexports.default = Simple;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _simple = __webpack_require__(3);\n\nvar _simple2 = _interopRequireDefault(_simple);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _simple2.default.createClass({\n    // DOM生成器\n    createElement: _simple2.default.createElement,\n    // 路由事件添加\n    listen: function listen(listener) {\n        if (!this.hasOwnProperty('listener')) {\n            this.listener || (this.listener = []);\n        };\n        this.listener.push(listener);\n    },\n    // 响应路由事件\n    updateLocation: function updateLocation() {\n        var self = this;\n        if (this.props.history === 'history') {\n            window.addEventListener('popstate', function () {\n                var path = location.pathname;\n                self.listener.forEach(function (listener) {\n                    listener(path);\n                });\n            }, false);\n            window.addEventListener('click', function (ev) {\n                var node = ev.target;\n                while (node.nodeName !== 'A' && node.parentNode) {\n                    node = node.parentNode;\n                }\n                if (node.href) {\n                    self.routes.some(function (route) {\n                        if (node.host === location.host && route.reg.test(node.pathname)) {\n                            ev.preventDefault();\n                            self.go(node.pathname);\n                            return true;\n                        }\n                    });\n                }\n            }, false);\n        } else {\n            window.addEventListener('hashchange', function () {\n                var path = location.hash.replace(/^#/, '');\n                self.listener.forEach(function (listener) {\n                    listener(path);\n                });\n            }, false);\n        }\n    },\n    // 路由跳转\n    go: function go(path) {\n        if (this.history === 'history') {\n            window.history.pushState({\n                path: path\n            }, '', path);\n            this.listener.forEach(function (listener) {\n                listener(path);\n            });\n        } else {\n            window.location.hash = path;\n        }\n    },\n    // 拼装组件\n    getComponent: function getComponent(routes, state) {\n        routes = routes.slice();\n        var component, route;\n        component = this.createElement((route = routes.shift()).component);\n        component.props = Object.assign({}, state, { router: this });\n        if (routes.length) {\n            component.props.children = this.getComponent(routes, state);\n        } else {\n            if (route.indexRoute) {\n                component.props.children = this.createElement(route.indexRoute.component);\n                state.routes.push(route.indexRoute);\n                component.props.children.props = Object.assign({}, state, { router: this });\n            }\n        }\n        return component;\n    },\n    // 路由匹配\n    matchRoutes: function matchRoutes(location) {\n        var self = this;\n        var state = {};\n        this.routes.some(function (route) {\n            if (route.reg.test(location)) {\n                var match = location.match(route.reg);\n                var params = {};\n                if (match && route.params) {\n                    route.params.forEach(function (name, index) {\n                        params[name] = match[index + 1];\n                    });\n                    state.params = params;\n                }\n                state.routes = route.routes;\n                state.components = self.getComponent(route.routes, state);\n                return true;\n            }\n        });\n        return state;\n    },\n    // 路由解析\n    parseRoutes: function parseRoutes(routes, str, childRoutes) {\n        var self = this;\n        var paramsReg = /:(\\w+)/g;\n        var path = str || '';\n        childRoutes = childRoutes || [];\n        var arr = childRoutes.slice();\n        routes.forEach(function (route, i) {\n            var routeObj = {};\n            if (/^\\//.test(route.path)) path = '';\n            routeObj.path = path += route.path;\n            routeObj.component = route.component;\n            if (route.indexRoute) routeObj.indexRoute = route.indexRoute;\n            childRoutes.push(route);\n            routeObj.routes = arr.slice().concat(route);\n            routeObj.reg = new RegExp('^' + path.replace(paramsReg, '(\\\\w+)') + '$');\n\n            var paramsMatch = path.match(paramsReg);\n            if (paramsMatch) {\n                routeObj.params = paramsMatch.map(function (name) {\n                    return name.replace(':', '');\n                });\n            }\n            self.routes.push(routeObj);\n\n            if (route.childRoutes) {\n                if (!/\\/$/.test(path)) path += '/';\n                self.parseRoutes(route.childRoutes, path, childRoutes);\n            }\n            childRoutes = arr.slice();\n            path = str || '';\n        });\n    },\n    // 匹配当前地址\n    isActive: function isActive() {\n        var self = this,\n            path;\n        if (this.props.history === 'history') {\n            path = location.pathname;\n        } else {\n            path = location.hash.replace(/^#/, '');\n        }\n        if (path === '') path = '/';\n        this.state = this.matchRoutes(path);\n    },\n\n    componentWillMount: function componentWillMount() {\n        var self = this;\n        this.history = this.props.history;\n        this.routes = [];\n        this.parseRoutes(_simple2.default.utils.isArray(this.props.routes) ? this.props.routes : [this.props.routes]);\n\n        this.listen(function (location) {\n            self.setState(self.matchRoutes(location));\n        });\n        this.updateLocation();\n\n        this.isActive();\n    },\n\n    render: function render() {\n        return this.state.components;\n    }\n\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = routes;\n\nvar _lesson = __webpack_require__(6);\n\nvar _lesson2 = _interopRequireDefault(_lesson);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction routes() {\n    return {\n        path: '/',\n        component: _lesson2.default\n    };\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVzLmpzPzdhYWIiXSwibmFtZXMiOlsicm91dGVzIiwicGF0aCIsImNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxNOztBQUZ4Qjs7Ozs7O0FBRWUsU0FBU0EsTUFBVCxHQUFrQjtBQUM3QixXQUFPO0FBQ0hDLGNBQU0sR0FESDtBQUVIQztBQUZHLEtBQVA7QUFJSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExlc3NvbiAgZnJvbSAnLi9qcy9jb250YWluZXJzL2xlc3Nvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJvdXRlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgIGNvbXBvbmVudDogTGVzc29uXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yb3V0ZXMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _components = __webpack_require__(2);\n\nexports.default = _components.Simple.createClass({\n\n    render: function render() {\n        return 'lessonn';\n    }\n\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29udGFpbmVycy9sZXNzb24uanM/NzIzYiJdLCJuYW1lcyI6WyJjcmVhdGVDbGFzcyIsInJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O2tCQUVlLG1CQUFPQSxXQUFQLENBQW1COztBQUU5QkMsWUFBUSxrQkFBVztBQUNmLGVBQU8sU0FBUDtBQUNIOztBQUo2QixDQUFuQixDIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1wbGUgfSBmcm9tICdjb21wb25lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgU2ltcGxlLmNyZWF0ZUNsYXNzKHtcbiAgICBcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJ2xlc3Nvbm4nXG4gICAgfVxuXG59KTsgXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2NvbnRhaW5lcnMvbGVzc29uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9zdHlsZS5sZXNzP2JiNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvY29tcG9uZW50cy9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);